{"version":3,"file":"Analytics.js","sources":["../../../../src/core/Analytics/Analytics.ts"],"sourcesContent":["import CollectId from '../Services/analytics/collect-id';\nimport EventsQueue, { EventsQueueModule } from './EventsQueue';\nimport { ANALYTICS_EVENT, AnalyticsInitialEvent, AnalyticsObject, AnalyticsProps, CreateAnalyticsEventObject } from './types';\nimport { ANALYTICS_EVENT_ERROR, ANALYTICS_EVENT_INFO, ANALYTICS_EVENT_LOG, ANALYTICS_INFO_TIMER_INTERVAL, ANALYTICS_PATH } from './constants';\nimport { debounce } from '../../utils/debounce';\nimport { AnalyticsModule } from '../../types/global-types';\nimport { createAnalyticsObject, processAnalyticsData } from './utils';\nimport { analyticsPreProcessor } from './analyticsPreProcessor';\n\nlet capturedCheckoutAttemptId = null;\nlet sendEventsTimerId = null;\n\nconst Analytics = ({ locale, clientKey, analytics, amount, analyticsContext, bundleType }: AnalyticsProps): AnalyticsModule => {\n    const defaultProps = {\n        enabled: true,\n        checkoutAttemptId: null,\n        analyticsData: {}\n    };\n\n    const props = { ...defaultProps, ...analytics };\n\n    const collectId = CollectId({ analyticsContext, clientKey, locale, amount, analyticsPath: ANALYTICS_PATH, bundleType });\n    const eventsQueue: EventsQueueModule = EventsQueue({ analyticsContext, clientKey, analyticsPath: ANALYTICS_PATH });\n\n    const sendAnalyticsEvents = () => {\n        if (capturedCheckoutAttemptId) {\n            return eventsQueue.run(capturedCheckoutAttemptId);\n        }\n        return Promise.resolve(null);\n    };\n\n    const addAnalyticsEvent = (type: ANALYTICS_EVENT, obj: AnalyticsObject) => {\n        const arrayName = type === ANALYTICS_EVENT_INFO ? type : `${type}s`;\n        eventsQueue.add(`${arrayName}`, obj);\n\n        /**\n         * The logic is:\n         *  - info events are stored until a log or error comes along,\n         *  but, if after a set time, no other analytics event (log or error) has come along then we send the info events anyway\n         */\n        if (type === ANALYTICS_EVENT_INFO) {\n            clearTimeout(sendEventsTimerId);\n            sendEventsTimerId = setTimeout(() => void sendAnalyticsEvents(), ANALYTICS_INFO_TIMER_INTERVAL);\n        }\n\n        /**\n         * The logic is:\n         *  - errors and logs get sent straightaway\n         *  ...but... tests with the 3DS2 process show that many logs can happen almost at the same time (or you can have an error followed immediately by a log),\n         *  so instead of making several sequential api calls we see if we can \"batch\" them using debounce\n         */\n        if (type === ANALYTICS_EVENT_LOG || type === ANALYTICS_EVENT_ERROR) {\n            clearTimeout(sendEventsTimerId); // clear any timer that might be about to dispatch the info events array\n\n            debounce(sendAnalyticsEvents)();\n        }\n    };\n\n    const anlModule: AnalyticsModule = {\n        /**\n         * Make \"setup\" call, to pass containerWidth, buildType, channel etc, and receive a checkoutAttemptId in return\n         * @param initialEvent -\n         */\n        setUp: async (initialEvent: AnalyticsInitialEvent) => {\n            const { payload } = props; // TODO what is payload, is it ever used?\n\n            const analyticsData = processAnalyticsData(props.analyticsData);\n\n            if (!capturedCheckoutAttemptId) {\n                try {\n                    const checkoutAttemptId = await collectId({\n                        ...initialEvent,\n                        ...(payload && { ...payload }),\n                        ...(Object.keys(analyticsData).length && { ...analyticsData })\n                    });\n                    capturedCheckoutAttemptId = checkoutAttemptId;\n                } catch (e: any) {\n                    console.warn(`Fetching checkoutAttemptId failed.${e ? ` Error=${e}` : ''}`);\n                }\n            }\n        },\n\n        getCheckoutAttemptId: (): string => capturedCheckoutAttemptId,\n\n        // Expose getter for testing purposes\n        getEventsQueue: () => eventsQueue,\n\n        createAnalyticsEvent: ({ event, data }: CreateAnalyticsEventObject): AnalyticsObject => {\n            if (!props.enabled) return;\n\n            const aObj: AnalyticsObject = createAnalyticsObject({\n                event,\n                ...data\n            });\n            // console.log('### Analytics::createAnalyticsEvent:: event=', event, ' aObj=', aObj);\n\n            addAnalyticsEvent(event, aObj);\n\n            return aObj;\n        },\n\n        getEnabled: () => props.enabled,\n\n        sendAnalytics: null\n    };\n\n    anlModule.sendAnalytics = props.enabled === true ? analyticsPreProcessor(anlModule) : () => {};\n\n    return anlModule;\n};\n\nexport default Analytics;\n"],"names":["capturedCheckoutAttemptId","sendEventsTimerId","Analytics","locale","clientKey","analytics","amount","analyticsContext","bundleType","props","enabled","checkoutAttemptId","analyticsData","collectId","CollectId","analyticsPath","ANALYTICS_PATH","eventsQueue","EventsQueue","sendAnalyticsEvents","run","Promise","resolve","anlModule","setUp","async","initialEvent","payload","processAnalyticsData","Object","keys","length","e","console","warn","getCheckoutAttemptId","getEventsQueue","createAnalyticsEvent","event","data","aObj","createAnalyticsObject","type","obj","arrayName","ANALYTICS_EVENT_INFO","add","clearTimeout","setTimeout","ANALYTICS_INFO_TIMER_INTERVAL","ANALYTICS_EVENT_LOG","ANALYTICS_EVENT_ERROR","debounce","addAnalyticsEvent","getEnabled","sendAnalytics","analyticsPreProcessor"],"mappings":"ubASA,IAAIA,EAA4B,KAC5BC,EAAoB,KAExB,MAAMC,EAAY,EAAGC,SAAQC,YAAWC,YAAWC,SAAQC,mBAAkBC,iBACzE,MAMMC,EAAQ,CALVC,SAAS,EACTC,kBAAmB,KACnBC,cAAe,CAAC,KAGgBP,GAE9BQ,EAAYC,EAAU,CAAEP,mBAAkBH,YAAWD,SAAQG,SAAQS,cAAeC,EAAgBR,eACpGS,EAAiCC,EAAY,CAAEX,mBAAkBH,YAAWW,cAAeC,IAE3FG,EAAsB,IACpBnB,EACOiB,EAAYG,IAAIpB,GAEpBqB,QAAQC,QAAQ,MA8BrBC,EAA6B,CAK/BC,MAAOC,MAAOC,IACV,MAAMC,QAAEA,GAAYlB,EAEdG,EAAgBgB,EAAqBnB,EAAMG,eAEjD,IAAKZ,EACD,IACI,MAAMW,QAA0BE,EAAU,IACnCa,KACCC,GAAW,IAAKA,MAChBE,OAAOC,KAAKlB,GAAemB,QAAU,IAAKnB,KAElDZ,EAA4BW,CAChC,CAAE,MAAOqB,GACLC,QAAQC,KAAK,sCAAqCF,EAAI,UAAUA,IAAM,IAC1E,CACJ,EAGJG,qBAAsB,IAAcnC,EAGpCoC,eAAgB,IAAMnB,EAEtBoB,qBAAsB,EAAGC,QAAOC,WAC5B,IAAK9B,EAAMC,QAAS,OAEpB,MAAM8B,EAAwBC,EAAsB,CAChDH,WACGC,IAMP,MAnEkB,EAACG,EAAuBC,KAC9C,MAAMC,EAAYF,IAASG,EAAuBH,EAAO,GAAGA,KAC5DzB,EAAY6B,IAAI,GAAGF,IAAaD,GAO5BD,IAASG,IACTE,aAAa9C,GACbA,EAAoB+C,YAAW,KAAW7B,GAAuB8B,GAAAA,IASjEP,IAASQ,GAAuBR,IAASS,IACzCJ,aAAa9C,GAEbmD,EAASjC,EAATiC,GACJ,EAyCIC,CAAkBf,EAAOE,GAElBA,CAAAA,EAGXc,WAAY,IAAM7C,EAAMC,QAExB6C,cAAe,MAKnB,OAFAhC,EAAUgC,eAAkC,IAAlB9C,EAAMC,QAAmB8C,EAAsBjC,GAAa,OAE/EA,CAAAA"}