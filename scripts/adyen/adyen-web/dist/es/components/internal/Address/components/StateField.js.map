{"version":3,"file":"StateField.js","sources":["../../../../../../src/components/internal/Address/components/StateField.tsx"],"sourcesContent":["import { h } from 'preact';\nimport { useState, useLayoutEffect } from 'preact/hooks';\nimport Field from '../../FormFields/Field';\nimport { useCoreContext } from '../../../../core/Context/CoreProvider';\nimport getDataset from '../../../../core/Services/get-dataset';\nimport { StateFieldItem, StateFieldProps } from '../types';\nimport Select from '../../FormFields/Select';\n\nexport default function StateField(props: StateFieldProps) {\n    const { classNameModifiers, label, onDropdownChange, readOnly, selectedCountry, specifications, value } = props;\n    const { i18n, loadingContext } = useCoreContext();\n    const [states, setStates] = useState<StateFieldItem[]>([]);\n    const [loaded, setLoaded] = useState<boolean>(false);\n\n    useLayoutEffect(() => {\n        if (!selectedCountry || !specifications.countryHasDataset(selectedCountry)) {\n            setStates([]);\n            setLoaded(true);\n            return;\n        }\n\n        getDataset(`states/${selectedCountry}`, loadingContext, i18n.locale)\n            .then(response => {\n                const newStates = response && response.length ? response : [];\n                setStates(newStates);\n                setLoaded(true);\n            })\n            .catch(() => {\n                setStates([]);\n                setLoaded(true);\n            });\n    }, [selectedCountry]);\n\n    if (!loaded || !states.length) return null;\n\n    return (\n        <Field\n            label={label}\n            classNameModifiers={classNameModifiers}\n            errorMessage={props.errorMessage}\n            isValid={!!value}\n            showValidIcon={false}\n            name={'stateOrProvince'}\n            i18n={i18n}\n            readOnly={readOnly && !!value}\n        >\n            <Select name={'stateOrProvince'} onChange={onDropdownChange} selectedValue={value} items={states} readonly={readOnly && !!value} />\n        </Field>\n    );\n}\n"],"names":["StateField","props","classNameModifiers","label","onDropdownChange","readOnly","selectedCountry","specifications","value","i18n","loadingContext","useCoreContext","states","setStates","useState","loaded","setLoaded","useLayoutEffect","countryHasDataset","getDataset","locale","then","response","newStates","length","catch","h","Field","errorMessage","isValid","showValidIcon","name","Select","onChange","selectedValue","items","readonly"],"mappings":"6YAQe,SAASA,EAAWC,GAC/B,MAAMC,mBAAEA,EAAkBC,MAAEA,EAAKC,iBAAEA,EAAgBC,SAAEA,EAAQC,gBAAEA,EAAeC,eAAEA,EAAcC,MAAEA,GAAUP,GACpGQ,KAAEA,EAAIC,eAAEA,GAAmBC,KAC1BC,EAAQC,GAAaC,EAA2B,KAChDC,EAAQC,GAAaF,GAAkB,GAqB9C,OAnBAG,GAAgB,KACZ,IAAKX,IAAoBC,EAAeW,kBAAkBZ,GAGtD,OAFAO,EAAU,SACVG,GAAU,GAIdG,EAAW,UAAUb,IAAmBI,EAAgBD,EAAKW,QACxDC,MAAKC,IACF,MAAMC,EAAYD,GAAYA,EAASE,OAASF,EAAW,GAC3DT,EAAUU,GACVP,GAAU,EAAA,IAEbS,OAAM,KACHZ,EAAU,IACVG,GAAU,EAAA,GACd,GACL,CAACV,IAECS,GAAWH,EAAOY,OAGnBE,EAACC,EAAAA,CACGxB,MAAOA,EACPD,mBAAoBA,EACpB0B,aAAc3B,EAAM2B,aACpBC,UAAWrB,EACXsB,eAAe,EACfC,KAAM,kBACNtB,KAAMA,EACNJ,SAAUA,KAAcG,GAExBkB,EAACM,EAAAA,CAAOD,KAAM,kBAAmBE,SAAU7B,EAAkB8B,cAAe1B,EAAO2B,MAAOvB,EAAQwB,SAAU/B,KAAcG,KAb5F,IAgB1C"}