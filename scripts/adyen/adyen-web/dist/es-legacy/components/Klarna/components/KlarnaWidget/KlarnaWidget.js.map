{"version":3,"file":"KlarnaWidget.js","sources":["../../../../../../src/components/Klarna/components/KlarnaWidget/KlarnaWidget.tsx"],"sourcesContent":["import Script from '../../../../utils/Script';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { h } from 'preact';\nimport { KlarnaWidgetAuthorizeResponse, KlarnaWidgetProps } from '../../types';\nimport { KLARNA_WIDGET_URL } from '../../constants';\nimport './KlarnaWidget.scss';\n\nexport function KlarnaWidget({ sdkData, paymentMethodType, payButton, ...props }: KlarnaWidgetProps) {\n    const klarnaWidgetRef = useRef(null);\n    const [status, setStatus] = useState('ready');\n\n    const handleError = () => {\n        setStatus('error');\n        props.onComplete({\n            data: {\n                paymentData: props.paymentData,\n                details: {}\n            }\n        });\n    };\n\n    const initializeKlarnaWidget = () => {\n        window.Klarna.Payments.init({\n            client_token: sdkData.client_token\n        });\n\n        window.Klarna.Payments.load(\n            {\n                container: klarnaWidgetRef.current,\n                payment_method_category: sdkData.payment_method_category\n            },\n            function (res) {\n                // If show_form: true is received together with an error, something fixable is wrong and the consumer\n                // needs to take action before moving forward\n                // If show_form: false, the payment method in the loaded widget will not be offered for this order\n                // based on Klarnaâ€™s pre-assessment.\n                if (!res.show_form || !!res.error) {\n                    handleError();\n                } else {\n                    props.onLoaded();\n                }\n            }\n        );\n    };\n\n    const authorizeKlarna = () => {\n        setStatus('loading');\n        try {\n            window.Klarna.Payments.authorize(\n                {\n                    payment_method_category: sdkData.payment_method_category\n                },\n                function (res: KlarnaWidgetAuthorizeResponse) {\n                    if (res.approved === true && res.show_form === true) {\n                        // Klarna has approved the authorization of credit for this order.\n                        setStatus('success');\n                        props.onComplete({\n                            data: {\n                                paymentData: props.paymentData,\n                                details: {\n                                    authorization_token: res.authorization_token\n                                }\n                            }\n                        });\n                    } else if (!res.approved && res.show_form === true) {\n                        // Fixable error\n                        setStatus('ready');\n                        props.onError(res);\n                    } else {\n                        // The purchase is declined. The widget should be hidden and the user\n                        // should select another payment method.\n                        handleError();\n                    }\n                }\n            );\n        } catch (e) {\n            handleError();\n        }\n    };\n\n    // Add Klarna Payments Widget SDK\n    useEffect(() => {\n        window.klarnaAsyncCallback = function () {\n            initializeKlarnaWidget();\n        };\n\n        const script = new Script(KLARNA_WIDGET_URL);\n        void script.load();\n\n        return () => {\n            script.remove();\n        };\n    }, []);\n\n    if (status !== 'error' && status !== 'success') {\n        return (\n            <div className=\"adyen-checkout__klarna-widget\">\n                <div ref={klarnaWidgetRef} />\n                {payButton({ status, disabled: status === 'loading', onClick: authorizeKlarna })}\n            </div>\n        );\n    }\n\n    return null;\n}\n"],"names":["KlarnaWidget","_param","sdkData","paymentMethodType","payButton","props","_object_without_properties","klarnaWidgetRef","useRef","status","setStatus","useState","handleError","onComplete","data","paymentData","details","authorizeKlarna","window","Klarna","Payments","authorize","payment_method_category","res","approved","show_form","authorization_token","onError","e","useEffect","klarnaAsyncCallback","init","client_token","load","container","current","error","onLoaded","script","Script","KLARNA_WIDGET_URL","remove","h","div","className","ref","disabled","onClick"],"mappings":"uoBAOO,SAASA,EAAaC,OAAAC,QAAEA,EAAOC,kBAAEA,EAAiBC,UAAEA,GAA9BH,EAA4CI,EAA5CC,EAAAL,EAAA,CAAEC,UAASC,oBAAmBC,cACvD,MAAMG,EAAkBC,EAAO,OACxBC,EAAQC,GAAaC,EAAS,SAE/BC,EAAc,KAChBF,EAAU,SACVL,EAAMQ,WAAW,CACbC,KAAM,CACFC,YAAaV,EAAMU,YACnBC,QAAS,CAAC,IAElB,EA2BEC,EAAkB,KACpBP,EAAU,WACV,IACIQ,OAAOC,OAAOC,SAASC,UACnB,CACIC,wBAAyBpB,EAAQoB,0BAErC,SAAUC,IACe,IAAjBA,EAAIC,WAAuC,IAAlBD,EAAIE,WAE7Bf,EAAU,WACVL,EAAMQ,WAAW,CACbC,KAAM,CACFC,YAAaV,EAAMU,YACnBC,QAAS,CACLU,oBAAqBH,EAAIG,yBAI7BH,EAAIC,WAA8B,IAAlBD,EAAIE,UAO5Bb,KALAF,EAAU,SACVL,EAAMsB,QAAQJ,GAMtB,GAER,CAAE,MAAOK,GACLhB,GACJ,GAiBJ,OAbAiB,GAAU,KACNX,OAAOY,oBAAsB,WA5D7BZ,OAAOC,OAAOC,SAASW,KAAK,CACxBC,aAAc9B,EAAQ8B,eAG1Bd,OAAOC,OAAOC,SAASa,KACnB,CACIC,UAAW3B,EAAgB4B,QAC3Bb,wBAAyBpB,EAAQoB,0BAErC,SAAUC,IAKDA,EAAIE,WAAeF,EAAIa,MACxBxB,IAEAP,EAAMgC,UAEd,GA2CJ,EAEA,MAAMC,EAAS,IAAIC,EAAOC,GAG1B,OAFKF,EAAOL,OAEL,KACHK,EAAOG,QAAM,CACjB,GACD,IAEY,UAAXhC,GAAiC,YAAXA,EAElBiC,EAACC,MAAAA,CAAIC,UAAU,iCACXF,EAACC,MAAAA,CAAIE,IAAKtC,IACTH,EAAU,CAAEK,SAAQqC,SAAqB,YAAXrC,EAAsBsC,QAAS9B,KAKnE,IACX"}